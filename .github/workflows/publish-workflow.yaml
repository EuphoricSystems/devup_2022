name: Publish Full

on:
  workflow_dispatch:

permissions:
  contents: write # for checkout and tag
  actions: write # updating envs
  pull-requests: write # for comments
  packages: write # for publish

jobs:
  build:
    name: build
    runs-on: 'ubuntu-latest'
    outputs:
      version: ${{ steps.gitversion.outputs.informationalVersion }}
      branchName: ${{ steps.gitversion.outputs.branchName }}
    steps:
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Global Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.x'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          useConfigFile: true

      - uses: nrwl/nx-set-shas@v2
      - run: yarn
      - run: npx nx workspace-lint
      - run: npx nx affected --target=lint --parallel=3
      - run: npx nx affected --target=test --parallel=3 --ci --code-coverage
      - run: npx nx affected --target=build --prod --all --parallel=3
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/**/*.*
            scripts/**/*.*
            templates/**/*.*
            build.json
            Dockerfile
            package.json
            yarn.lock

  docker:
    runs-on: 'ubuntu-latest'
    needs: 'build'
    strategy:
      matrix:
        app: ['api', 'ui']
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Load build info
        id: build_info
        uses: zoexx/github-action-json-file-properties@release
        with:
          file_path: "./dist/build.json"
          prop_path: "${{ matrix.app }}"

      - run: |
          echo ${{steps.build_info.outputs.image}}
          echo ${{steps.build_info.outputs.labels.title}}
          echo ${{steps.build_info.outputs.labels.description}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v4
        with:
          images: |
            u4ic/${{ steps.build_info.outputs.image }}
          labels: |
            maintainer=Hub
            org.opencontainers.image.title=${{ fromJSON(steps.build_info.outputs.labels).title }}
            org.opencontainers.image.description=${{ fromJSON(steps.build_info.outputs.labels).description }}
            org.opencontainers.image.vendor=Swimlane
          tags: |
            type=ref,event=branch
            type=raw,value=${{needs.build.outputs.version}}
            type=sha,prefix=${{needs.build.outputs.branchName}}_
            type=sha,prefix=

      - name: Build-Push
        id: docker_build_push
        uses: docker/build-push-action@v3
        with:
          context: ./dist
          file: ./dist/Dockerfile
          push: true
          cache-to: type=local,dest=/tmp/docker-cache
          cache-from: type=local,src=/tmp/docker-cache
          target: ${{ steps.build_info.outputs.target }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.PRIVATE_GITHUB_TOKEN }}
  test-deploy:
    environment: 'test'
    needs: 'docker'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy containers
        run: |
          echo 'Containers deployed to test'
  staging-deploy:
    environment: 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy containers
        run: |
          echo 'Containers deployed to staging'
  prod-deploy:
    environment: 'prod'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy containers
        run: |
          echo 'Containers deployed to prod'
